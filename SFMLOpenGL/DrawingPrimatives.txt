#include <Game.h>

Game::Game() : window(VideoMode(800, 600), "OpenGL")
{
}

Game::~Game() {}

void Game::run()
{

	initialize();

	Event event;

	while (isRunning) {

		cout << "Game running..." << endl;

		while (window.pollEvent(event))
		{
			if (event.type == Event::Closed)
			{
				isRunning = false;
			}
		}
		update();
		draw();
	}

}

void Game::initialize()
{
	isRunning = true;
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0f, window.getSize().x / window.getSize().y, 1.0, 500.0f);
	glMatrixMode(GL_MODELVIEW);
}

void Game::update()
{
	cout << "Update up" << endl;
}

void Game::draw()
{
	cout << "Draw up" << endl;
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glBegin(GL_TRIANGLES); {
		glVertex3f(0.0f,0.5f,-5.0f );
		glVertex3f(-0.5f, -0.5f, -5.0f);
		glVertex3f(0.5f, -0.5f, -5.0f);
	}
	glEnd();
	glBegin(GL_POINTS);
	
	//draw the points of a circle
	for (float deg = 0; deg < 360; deg++)
	{
		glVertex3f(cosf(deg) * 2.f,sinf(deg) * 2.f, -5.f);
	}

	glEnd();

	glBegin(GL_LINES);
	// top left to bottom right
	glVertex3f(-3.f, 3.f, -5.f);
	glVertex3f(3.f, -3.f, -5.f);

	glEnd();

	glBegin(GL_LINE_STRIP);

	// top right to bottom left
	glVertex3f(2.f, 2.f, -5.f);
	glVertex3f(-2.f, -2.f, -5.f);

	glEnd();

	glBegin(GL_LINE_LOOP);

	glVertex3f(-1.f, 1.f, -5.f);
	glVertex3f(1.f, 1.f, -5.f);

	glEnd();

	glBegin(GL_TRIANGLE_STRIP);

	glVertex3f(-2.f,-2.f,-5.f);
	glVertex3f(-1.f, -2.f, -5.f);
	glVertex3f(-2.f, -1.f, -5.f);

	glEnd();

	glBegin(GL_TRIANGLE_FAN);

	glVertex3f(2.f, 2.f, -5.f);
	glVertex3f(1.f, 2.f, -5.f);
	glVertex3f(2.f, 1.f, -5.f);

	glEnd();

	glBegin(GL_QUADS);

	glVertex3f(-2.f, 2.f, -5.f);
	glVertex3f(-2.f, 1.f, -5.f);
	glVertex3f(-1.f, 1.f, -5.f);
	glVertex3f(-1.f, 2.f, -5.f);

	glEnd();

	window.display();
}

void Game::unload()
{
	cout << "Cleaning up" << endl;
}

